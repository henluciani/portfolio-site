"use client";

import React, { useEffect, useState } from 'react';
import Lottie from 'lottie-react';

function Badge(props) {
    return (
      <a
        {...props}
        target="_blank"
        className="inline-flex items-center rounded bg-neutral-50 p-1 m-1 text-xs leading-4 text-neutral-900 no-underline dark:bg-neutral-800 dark:bg-opacity-0 shadow-sm shadow-neutral-500 neumorphic dark:text-neutral-100"
      />
    );
  }

interface ProgressBarProps {
  label: string;
  level: number; // level as a percentage
  lottieUrl?: string; // Optional URL for Lottie animation
}

const ProgressBar: React.FC<ProgressBarProps> = ({ label, level, lottieUrl }) => {
  const [animationData, setAnimationData] = useState<any>(null);

  useEffect(() => {
    if (lottieUrl) {
      fetch(lottieUrl)
        .then((response) => response.json())
        .then((data) => setAnimationData(data))
        .catch((error) => console.error('Error loading Lottie animation:', error));
    }
  }, [lottieUrl]);

  return (
    <div className="flex items-center">
      {animationData && (
        <div className="w-12 h-12 mr-4 rounded"> {/* Adjusted size to 50x50 (12x12 in Tailwind units) */}
          <Lottie animationData={animationData} />
        </div>
      )}
      <div className="flex-1">
        <div className="text-sm text-gray-100 mb-2">{label}</div>
        <div className="relative h-2 bg-gray-100 bg-opacity-5 rounded-full">
          <div
            className="absolute top-0 left-0 h-full border border-neutral-400 border-opacity-50 bg-gradient-to-r from-transparent via-transparent to-neutral-500 rounded-full transition-all duration-1000 ease-in-out shadow-sm shadow-neutral-700 neumorphic"
            style={{ width: `${level}%` }}
          />
        </div>
      </div>
    </div>
  );
};

interface Skill {
  label: string;
  level: number;
  lottieUrl?: string;
}

const skills: Skill[] = [
  { label: 'JavaScript', level: 5 },
  { label: 'TypeScript', level: 4 },
  // more skills
];

interface CardProps {
  name: string;
  description?: string;
  imageUrl: string;
  skills?: { label: string; level: number; lottieUrl?: string }[];
}




const Card: React.FC<CardProps> = ({ name, description, imageUrl, skills = [] }) => {
  // Debugging: log skills to check if they are defined
  console.log('skills:', skills);

  // Group skills into pairs for display
  const groupedSkills: Skill[][] = [];
  for (let i = 0; i < skills.length; i += 2) {
    groupedSkills.push(skills.slice(i, i + 2));
  }

  return (
    <div className="w-full max-w-screen-lg mx-auto mb-8 p-6 backdrop-blur border border-neutral-400 border-opacity-70 bg-gradient-to-r from-navy-900 via-neutral-900 to-neutral-900 rounded-lg shadow-md bg-opacity-40 shadow-neutral-900 neumorphic">
      <div className="flex items-top mb-6">
        <img
          className="w-20 h-20 border border-neutral-400 border-opacity-70 rounded-lg mr-6 mix-blend-luminosity shadow-md backdrop-blur-lg shadow-neutral-500 neumorphic"
          src={imageUrl}
          alt={name}
        />
        <div>
        <h1 className="text-md mb-2 opacity-90 font-radwave italic tracking-tighter">
        {name}
      </h1>
          <p className="text-neutral-400 items-toÂ´p text-sm font-style: italic font-light">product designer/front-end developer. heading product design at  <Badge href="https://useoinc.com.br">
          <svg id="oinc" width="15" height="12" viewBox="0 0 57 43" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M19.0098 36.5663C19.0192 36.2955 19.0098 36.0254 19.0098 35.7359C19.0098 35.5202 19.0005 35.302 19.0013 35.0804C16.7335 34.5666 14.5236 33.8252 12.4051 32.8676L12.3201 37.5955C12.6551 37.771 12.999 37.9288 13.3506 38.0684C13.5589 38.1576 13.7672 38.2434 13.9755 38.3385H13.9798C15.5782 39.0636 17.2617 39.551 18.9962 39.939C19.0209 39.382 19.0115 38.8174 19.0022 38.2272C18.9979 37.6889 18.992 37.1293 19.0098 36.5663Z" fill="#FCB463"/>
<path d="M2.85175 25.1669C2.84665 25.284 2.8424 25.4004 2.84155 25.5175C2.82794 27.4705 3.39506 29.3632 4.54969 31.2406C6.03167 33.6445 8.34009 35.2994 10.4555 36.6538V36.6487V36.6529V36.5875C10.4708 36.3498 10.4708 36.1036 10.4649 35.8497V35.7546L10.5159 31.9276C7.19821 30.1156 4.54969 27.8017 2.85175 25.1669Z" fill="#FCB463"/>
<path d="M20.9826 35.4828C20.9826 35.4956 20.9826 35.5091 20.9826 35.5219V35.5159L20.9622 35.4803V40.2871V40.3432C23.7476 41.0539 26.9989 40.9817 27.4972 40.9656V36.0967C25.3128 36.0643 23.1344 35.859 20.9826 35.4828Z" fill="#FCB463"/>
<path d="M27.2768 0.879484C16.8945 0.90241 7.79682 4.9714 3.45377 10.7132C1.71756 12.988 0.744873 16.4965 0.744873 19.2595V22.2502C0.744873 23.6504 0.999948 27.5597 1.46843 28.8665C1.57641 29.1663 1.68781 29.4609 1.79579 29.7641C4.62711 37.6193 15.3274 42.579 27.4979 42.8405C27.4979 42.8405 28.383 42.8932 29.8293 42.8405L29.8377 42.8328C41.8985 42.5068 52.4654 37.5632 55.2763 29.7649C55.3843 29.4651 55.4956 29.1705 55.6036 28.8674C56.0764 27.5606 56.328 23.6512 56.328 22.251V19.2587C56.328 16.4957 55.3545 12.9871 53.6191 10.7123C49.2446 4.92981 40.0484 0.84297 29.5742 0.877784L27.2768 0.879484ZM10.4581 36.6479V36.653C8.34267 35.2986 6.03681 33.6437 4.55228 31.2398C3.39764 29.3624 2.83053 27.4731 2.84414 25.5168C2.84414 25.3996 2.84924 25.2832 2.85434 25.166C4.55483 27.7983 7.20079 30.1147 10.5236 31.9267L10.4725 35.7537C10.4836 36.0518 10.4788 36.3503 10.4581 36.6479ZM19.0005 39.9424C17.2635 39.5544 15.58 39.067 13.9841 38.3419H13.9798C13.7715 38.2468 13.5632 38.161 13.3549 38.0718C13.0037 37.9321 12.66 37.7742 12.3252 37.5989L12.4103 32.871C14.5287 33.8286 16.7387 34.57 19.0065 35.0838C19.0065 35.3054 19.0065 35.5236 19.015 35.7393C19.0209 36.0288 19.0277 36.2989 19.015 36.5698C18.9971 37.1327 19.0031 37.6923 19.015 38.234C19.0158 38.8208 19.0252 39.3829 19.0005 39.9424ZM20.962 40.3432V40.2881V40.3441V40.3432ZM27.4979 40.9656C26.9971 40.9818 23.7483 41.0506 20.9629 40.3432V40.2872V35.4803L20.9833 35.516V35.482C20.9833 35.4948 20.9833 35.5083 20.9833 35.5211C20.9833 35.5083 20.9833 35.4948 20.9833 35.482C23.1354 35.8582 25.3141 36.0635 27.4987 36.0959L27.4979 40.9656ZM36.1126 40.3424C33.3272 41.0531 30.0758 40.9809 29.5776 40.9648V36.0959C31.7622 36.0635 33.9408 35.8582 36.093 35.482V35.5211V35.482C36.093 35.4939 36.093 35.5049 36.093 35.516L36.1134 35.4803V40.2872L36.1126 40.3424ZM44.7519 37.5955C44.4168 37.7708 44.0729 37.9287 43.7214 38.0684H43.7172C43.5089 38.1576 43.3005 38.2434 43.0922 38.3385C41.4963 39.0636 39.8128 39.551 38.0758 39.939C38.052 39.382 38.0605 38.8174 38.0698 38.2272C38.0783 37.6855 38.0851 37.1234 38.0698 36.563C38.0613 36.2921 38.0698 36.022 38.0698 35.7325C38.0698 35.5168 38.0792 35.2986 38.0783 35.077C40.3463 34.5631 42.5566 33.8217 44.6754 32.8642L44.7604 37.5921L44.7519 37.5955ZM52.5223 31.2406C51.0403 33.6445 48.7319 35.2994 46.6165 36.6538V36.6487C46.5971 36.3513 46.5931 36.0532 46.6046 35.7554L46.5536 31.9284C49.8764 30.1164 52.5249 27.8026 54.2228 25.1677C54.2279 25.2849 54.2322 25.4013 54.233 25.5185C54.2441 27.474 53.6778 29.3632 52.5223 31.2406ZM30.7773 34.1769V34.1879C30.7773 34.1879 28.8923 34.278 26.7165 34.1947L26.6119 34.1896C13.2784 33.687 2.71234 26.7692 2.71234 18.3111C2.71234 9.66279 13.7494 2.62612 27.4987 2.4045H29.575C43.3244 2.62612 54.3614 9.66279 54.3614 18.3111C54.3606 26.7029 43.9629 33.5783 30.7773 34.1769Z" fill="#1E1E1E"/>
<path d="M38.0741 35.0804C38.0741 35.302 38.0741 35.5202 38.0656 35.7359C38.0597 36.0254 38.0537 36.2955 38.0656 36.5663C38.0843 37.1293 38.0775 37.6889 38.0656 38.2306C38.0563 38.8208 38.0478 39.3854 38.0716 39.9424C39.8061 39.5544 41.4896 39.067 43.088 38.3419C43.2963 38.2468 43.5047 38.161 43.713 38.0718H43.7172C44.0687 37.9321 44.4126 37.7742 44.7477 37.5989L44.6627 32.871C42.5465 33.8268 40.3391 34.567 38.0741 35.0804Z" fill="#FCB463"/>
<path d="M46.5508 31.9276L46.6018 35.7546V35.8497C46.5959 36.1044 46.5959 36.3498 46.6112 36.5875V36.6529V36.6487V36.6538C48.7266 35.2994 51.0324 33.6445 52.517 31.2406C53.6725 29.3632 54.2387 27.4739 54.2251 25.5175C54.2251 25.4004 54.22 25.284 54.2149 25.1669C52.5221 27.8017 49.8735 30.1156 46.5508 31.9276Z" fill="#FCB463"/>
<path d="M29.5744 2.40198H27.498C13.7487 2.6236 2.71167 9.66027 2.71167 18.3086C2.71167 26.7692 13.2777 33.687 26.6112 34.1871L26.7158 34.1922C28.8916 34.2771 30.7766 34.1854 30.7766 34.1854V34.1744C43.9614 33.58 54.3599 26.7021 54.3599 18.306C54.3607 9.66364 43.3237 2.6236 29.5744 2.40198ZM29.8345 31.2857L29.8294 31.2942H29.5744V31.3086C28.7445 31.323 27.9368 31.3086 27.498 31.295C15.916 31.0241 6.66192 25.1814 6.66192 18.0148C6.66192 10.8482 15.916 5.00623 27.498 4.73536H29.5744C41.1564 5.00623 50.4105 10.849 50.4105 18.0148C50.4105 25.1279 41.2941 30.9341 29.8345 31.2857Z" fill="#FCB463"/>
<path d="M29.5743 4.73877H27.498C15.9159 5.00964 6.66187 10.8524 6.66187 18.0182C6.66187 25.1839 15.9159 31.0275 27.498 31.2984C27.9367 31.3103 28.7445 31.3264 29.5743 31.312V31.2975H29.8294L29.8345 31.2891C41.2941 30.9375 50.4104 25.1312 50.4104 18.0173C50.4104 10.8465 41.1572 5.00539 29.5743 4.73877ZM30.2707 6.43701C40.449 6.89384 48.4659 11.9036 48.4659 18.019C48.4659 24.2736 40.0799 29.3718 29.5726 29.6265V29.6469C29.4349 29.6469 29.2861 29.6528 29.133 29.6537C28.5472 29.6537 27.8917 29.6401 27.4886 29.6273C16.9856 29.3726 8.60383 24.2736 8.60383 18.0207C8.60383 11.9436 16.5222 6.95838 26.6103 6.44721" fill="#1E1E1E"/>
<path d="M26.6178 6.437C16.5297 6.94647 8.61133 11.9333 8.61133 18.0105C8.61133 24.2634 16.9931 29.3607 27.4961 29.6172C27.8992 29.6299 28.5547 29.646 29.1405 29.6434C29.2961 29.6375 29.4458 29.629 29.5801 29.6163C40.0874 29.3616 48.4734 24.2668 48.4734 18.0088C48.4734 11.8951 40.4548 6.88533 30.2782 6.4268C30.2782 6.4268 28.3685 6.35209 26.6178 6.437Z" fill="#F7A5A7"/>
<path d="M37.2163 13.1111C36.4496 13.1111 35.7143 13.4153 35.1721 13.9567C34.63 14.4981 34.3254 15.2324 34.3254 15.9981V19.353C34.3254 20.1186 34.63 20.853 35.1721 21.3944C35.7143 21.9358 36.4496 22.24 37.2163 22.24C37.983 22.24 38.7183 21.9358 39.2604 21.3944C39.8025 20.853 40.1071 20.1186 40.1071 19.353V15.9981C40.1071 15.2324 39.8025 14.4981 39.2604 13.9567C38.7183 13.4153 37.983 13.1111 37.2163 13.1111Z" fill="#1E1E1E"/>
<path d="M36.0921 35.5159V35.5219V35.4828C33.9399 35.859 31.7613 36.0643 29.5767 36.0967V40.9656C30.0775 40.9818 33.3262 41.0505 36.1116 40.3432V40.2872V35.4803L36.0921 35.5159Z" fill="#FCB463"/>
<path d="M19.8559 13.1111C19.0892 13.1111 18.3539 13.4153 17.8118 13.9567C17.2697 14.4981 16.9651 15.2324 16.9651 15.9981V19.353C16.9651 20.1186 17.2697 20.853 17.8118 21.3944C18.3539 21.9358 19.0892 22.24 19.8559 22.24C20.6226 22.24 21.3579 21.9358 21.9001 21.3944C22.4422 20.853 22.7468 20.1186 22.7468 19.353V15.9981C22.7468 15.2324 22.4422 14.4981 21.9001 13.9567C21.3579 13.4153 20.6226 13.1111 19.8559 13.1111Z" fill="#1E1E1E"/>
</svg>
             Oinc
          </Badge></p>
        </div>
      </div>
      <div>

        <br/>

        <div className="flex">
  <ul className="flex w-full justify-between font-radwave text-xs">
    <li><a href="/">home</a></li>
    <li><a href="/projects">projects</a></li>
    <li><a href="/blog">blog</a></li>
    <li><a href="mailto:me@henluciani.com">contact</a></li>
  </ul>
</div>

        {groupedSkills.map((group, index) => (
          <div key={index} className="flex mb-6">
            {group.map((skill, idx) => (
              <div key={idx} className="flex-1 mr-4 last:mr-0">
                <ProgressBar
                  label={skill.label}
                  level={skill.level}
                  lottieUrl={skill.lottieUrl}
                />
              </div>
            ))}
          </div>
        ))}
      </div>
    </div>
  );
};

export default Card;
